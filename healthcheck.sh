#!/bin/sh
# healthcheck.sh
# Script para verificar a sa√∫de da aplica√ß√£o com detec√ß√£o aprimorada de problemas

# Configura√ß√µes
HOST="localhost"
PORT="${PORT:-3002}" # Usa valor da vari√°vel PORT ou 3002 como padr√£o
ENDPOINT="/api/health"
TIMEOUT=15
MAX_RETRIES=3
RETRY_INTERVAL=5

echo "ü©∫ Verificando sa√∫de da aplica√ß√£o em http://$HOST:$PORT$ENDPOINT"

# Fun√ß√£o para verificar sa√∫de com m√∫ltiplas tentativas
check_health() {
  for i in $(seq 1 $MAX_RETRIES); do
    echo "üîÑ Tentativa $i de $MAX_RETRIES..."
    
    # Usa wget para fazer a requisi√ß√£o HTTP
    response=$(wget --quiet --tries=1 --timeout=$TIMEOUT -O- "http://$HOST:$PORT$ENDPOINT" 2>&1)
    status=$?
    
    # Verifica√ß√µes adicionais
    if [ $status -eq 0 ]; then
      # Verifica se a resposta cont√©m "status": "ok"
      if echo "$response" | grep -q "\"status\".*:.*\"ok\""; then
        echo "‚úÖ Aplica√ß√£o est√° saud√°vel"
        
        # Verifica conectividade com banco de dados
        if echo "$response" | grep -q "\"dbConnected\".*:.*true"; then
          echo "‚úÖ Banco de dados conectado"
          exit 0
        else
          echo "‚ö†Ô∏è Banco de dados n√£o conectado"
          # Se estamos na √∫ltima tentativa, falha; caso contr√°rio, tenta novamente
          if [ $i -eq $MAX_RETRIES ]; then
            echo "‚ùå Falha na conex√£o com o banco de dados ap√≥s $MAX_RETRIES tentativas"
            exit 1
          fi
        fi
      else
        echo "‚ö†Ô∏è Resposta do servidor indica problema: $response"
      fi
    else
      echo "‚ö†Ô∏è Falha ao acessar endpoint de sa√∫de: status=$status"
    fi
    
    # Se n√£o √© a √∫ltima tentativa, aguarda antes de tentar novamente
    if [ $i -lt $MAX_RETRIES ]; then
      echo "‚è≥ Aguardando $RETRY_INTERVAL segundos antes de tentar novamente..."
      sleep $RETRY_INTERVAL
    fi
  done
  
  echo "‚ùå Falha ap√≥s $MAX_RETRIES tentativas"
  exit 1
}

check_health
