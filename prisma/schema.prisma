generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  name               String
  password           String
  avatar             String?
  bio                String?
  phone              String?
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  points             Int                 @default(0)
  role               UserRole            @default(USER)
  slug               String              @unique
  activityLogs       ActivityLog[]
  appointments       Appointment[]
  comments           Comment[]
  gamificationEvents GamificationEvent[]
  likes              Like[]
  posts              Post[]
  professional       Professional?
  reviews            Review[]
  addresses          UserAddress[]
  badges             UserBadge[]

  @@index([email])
  @@index([points])
  @@map("users")
}

model UserAddress {
  id           String   @id @default(uuid())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String   @map("zip_code")
  isPrimary    Boolean  @default(false)
  userId       String   @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([city])
  @@index([state])
  @@map("user_addresses")
}

model Company {
  id              String          @id @default(uuid())
  name            String
  description     String
  logo            String?
  coverImage      String?         @map("cover_image")
  rating          Float           @default(0)
  totalReviews    Int             @default(0) @map("total_reviews")
  yearEstablished String?         @map("year_established")
  phone           String?
  email           String?
  workingHours    Json?           @map("working_hours")
  categories      String[]
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  address         CompanyAddress?
  professionals   Professional[]
  reviews         Review[]
  services        Service[]

  @@index([name])
  @@index([rating])
  @@index([categories], type: Gin)
  @@map("companies")
}

model CompanyAddress {
  id           String   @id @default(uuid())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String   @map("zip_code")
  companyId    String   @unique @map("company_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([city])
  @@index([state])
  @@map("company_addresses")
}

model Service {
  id            String                @id @default(uuid())
  name          String
  description   String
  duration      String
  categoryId    Int                   @map("category_id")
  image         String?
  companyId     String?               @map("company_id") // Made optional
  createdAt     DateTime              @default(now()) @map("created_at")
  updatedAt     DateTime              @updatedAt @map("updated_at")
  price         Decimal
  appointments  Appointment[]
  professionals ProfessionalService[]
  reviews       Review[]
  category      Category              @relation(fields: [categoryId], references: [id])
  company       Company?              @relation(fields: [companyId], references: [id], onDelete: Cascade) // Made optional

  @@unique([name, companyId])
  @@index([name])
  @@index([price])
  @@index([categoryId])
  @@index([companyId])
  @@map("services")
}

model Professional {
  id                    String                         @id @default(uuid())
  name                  String
  role                  String
  image                 String?
  coverImage            String?                        @map("cover_image")
  rating                Float                          @default(0)
  totalReviews          Int                            @default(0) @map("total_reviews")
  companyId             String?                        @map("company_id")
  createdAt             DateTime                       @default(now()) @map("created_at")
  updatedAt             DateTime                       @updatedAt @map("updated_at")
  workingHours          Json?                          @map("working_hours")
  bio                   String?
  phone                 String?
  userId                String                         @unique @map("user_id")
  scheduledAppointments Appointment[]                  @relation("ProfessionalAppointments")
  availability          ProfessionalAvailabilitySlot[]
  education             ProfessionalEducation[]
  experiences           ProfessionalExperience[]
  portfolio             ProfessionalPortfolioItem[]
  services              ProfessionalService[]
  company               Company?                       @relation(fields: [companyId], references: [id])
  user                  User                           @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews               Review[]
  scheduleBlocks        ScheduleBlock[]

  @@index([name])
  @@index([rating])
  @@index([companyId])
  @@index([role])
  @@index([userId])
  @@map("professionals")
}

model ProfessionalExperience {
  id             String       @id @default(uuid())
  title          String
  companyName    String       @map("company_name")
  description    String?
  startDate      DateTime     @map("start_date")
  endDate        DateTime?    @map("end_date")
  isCurrent      Boolean      @default(false) @map("is_current")
  professionalId String       @map("professional_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@index([professionalId])
  @@map("professional_experiences")
}

model ProfessionalEducation {
  id             String       @id @default(uuid())
  institution    String
  degree         String
  fieldOfStudy   String       @map("field_of_study")
  startDate      DateTime     @map("start_date")
  endDate        DateTime?    @map("end_date")
  description    String?
  professionalId String       @map("professional_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@index([professionalId])
  @@map("professional_education")
}

model ProfessionalAvailabilitySlot {
  id             String       @id @default(uuid())
  dayOfWeek      String
  startTime      String
  endTime        String
  professionalId String       @map("professional_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@index([professionalId])
  @@map("professional_availability_slots")
}

model ProfessionalPortfolioItem {
  id             String       @id @default(uuid())
  imageUrl       String
  description    String?
  professionalId String       @map("professional_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@index([professionalId])
  @@map("professional_portfolio_items")
}

model ProfessionalService {
  professionalId String       @map("professional_id")
  serviceId      String       @map("service_id")
  price          String?
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  service        Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([professionalId, serviceId])
  @@index([serviceId])
  @@map("professional_services")
}

model Appointment {
  id             String            @id @default(uuid())
  date           DateTime
  userId         String            @map("user_id")
  serviceId      String            @map("service_id")
  professionalId String?           @map("professional_id")
  notes          String?
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  status         AppointmentStatus @default(PENDING)
  professional   Professional?     @relation("ProfessionalAppointments", fields: [professionalId], references: [id])
  service        Service           @relation(fields: [serviceId], references: [id])
  user           User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([serviceId])
  @@index([professionalId])
  @@index([date])
  @@index([status])
  @@map("appointments")
}

model Review {
  id             String        @id @default(uuid())
  rating         Float
  comment        String?
  userId         String        @map("user_id")
  serviceId      String?       @map("service_id")
  professionalId String?       @map("professional_id")
  companyId      String?       @map("company_id")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  company        Company?      @relation(fields: [companyId], references: [id])
  professional   Professional? @relation(fields: [professionalId], references: [id])
  service        Service?      @relation(fields: [serviceId], references: [id])
  user           User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([serviceId])
  @@index([professionalId])
  @@index([companyId])
  @@index([rating])
  @@map("reviews")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  icon      String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  services  Service[]

  @@map("categories")
}

model ScheduleBlock {
  id             String       @id @default(uuid())
  professionalId String       @map("professional_id")
  startTime      DateTime     @map("start_time")
  endTime        DateTime     @map("end_time")
  reason         String?
  isAllDay       Boolean      @default(false) @map("is_all_day")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@index([professionalId])
  @@index([startTime])
  @@index([endTime])
  @@map("schedule_blocks")
}

model Badge {
  id              String      @id @default(uuid())
  name            String      @unique
  description     String
  iconUrl         String?     @map("icon_url")
  pointsThreshold Int?        @map("points_threshold")
  eventTrigger    String?     @map("event_trigger")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  users           UserBadge[]

  @@index([name])
  @@map("badges")
}

model UserBadge {
  userId    String   @map("user_id")
  badgeId   String   @map("badge_id")
  awardedAt DateTime @default(now()) @map("awarded_at")
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, badgeId])
  @@index([badgeId])
  @@map("user_badges")
}

model GamificationEvent {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  eventType     String   @map("event_type")
  pointsAwarded Int      @default(0) @map("points_awarded")
  createdAt     DateTime @default(now()) @map("created_at")
  details       Json?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventType])
  @@map("gamification_events")
}

model Post {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  imageUrl  String?   @map("image_url")
  userId    String    @map("user_id")
  videoUrl  String?   @map("video_url")
  comments  Comment[]
  likes     Like[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]

  @@index([userId])
  @@index([postId])
  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  postId    String?  @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  commentId String?  @map("comment_id")
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@index([postId])
  @@index([commentId])
  @@map("likes")
}

model ActivityLog {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  activityType String   @map("activity_type")
  details      Json?
  referenceId  String?  @map("reference_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([activityType])
  @@map("activity_logs")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  type      String
  message   String
  isRead    Boolean  @default(false) @map("is_read")
  linkTo    String?  @map("link_to")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([isRead])
  @@map("notifications")
}

enum UserRole {
  USER
  ADMIN
  PROFESSIONAL
  COMPANY_OWNER
  STAFF
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}
