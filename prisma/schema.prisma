// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuário
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  password      String
  avatar        String?   // Renamed from avatar, added based on controller/frontend usage
  bio           String?   // Added bio field based on controller/frontend usage
  phone         String?   // Added phone field based on controller/frontend usage
  role          UserRole  @default(USER) // Added role field based on controller/test usage
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  addresses     UserAddress[] // Relation to UserAddress
  appointments  Appointment[]
  reviews       Review[]

  @@index([email]) // Index for login
  @@map("users") // Map to lowercase table name
}

// Modelo de Endereço do Usuário (NOVO)
model UserAddress {
  id           String   @id @default(uuid())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String   @map("zip_code")
  isPrimary    Boolean  @default(false) // Indica se é o endereço principal
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([userId]) // Index for querying user addresses
  @@index([city])   // Index for potential location filtering
  @@index([state])  // Index for potential location filtering
  @@map("user_addresses") // Map to lowercase table name
}

// Modelo de Empresa
model Company {
  id              String         @id @default(uuid())
  name            String
  description     String
  logo            String?
  coverImage      String?        @map("cover_image")
  rating          Float          @default(0)
  totalReviews    Int            @default(0) @map("total_reviews")
  yearEstablished String?        @map("year_established")
  phone           String?
  email           String?
  address         CompanyAddress? // Relation to CompanyAddress
  workingHours    Json?          @map("working_hours")
  categories      String[]       // TODO: Consider changing to relation with Category model. Indexing String[] might require specific DB features (e.g., GIN in Postgres).
  services        Service[]
  professionals   Professional[]
  reviews         Review[]
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  @@index([name])   // Index for sorting and searching
  @@index([rating]) // Index for sorting and filtering
  // @@index([categories]) // Indexing array depends on DB
  @@map("companies") // Map to lowercase table name
}

// Modelo de Endereço da Empresa (Renomeado de Address)
model CompanyAddress {
  id            String    @id @default(uuid())
  street        String
  number        String
  complement    String?
  neighborhood  String
  city          String
  state         String
  zipCode       String    @map("zip_code")
  company       Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String    @unique @map("company_id") // Unique index already exists
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@index([city])  // Index for location filtering
  @@index([state]) // Index for location filtering
  @@map("company_addresses") // Map to lowercase table name
}

// Modelo de Serviço
model Service {
  id            String    @id @default(uuid())
  name          String
  description   String
  price         Decimal   // Changed from String to support numeric filtering/sorting
  duration      String
  category      Category @relation(fields: [categoryId], references: [id]) // Changed to relation
  categoryId    Int      @map("category_id") // Added categoryId field
  image         String?
  company       Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String    @map("company_id")
  professionals ProfessionalService[]
  appointments  Appointment[]
  reviews       Review[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@index([name])       // Index for sorting and searching
  @@index([price])      // Index for sorting and filtering
  @@index([categoryId]) // Index for filtering
  @@index([companyId])  // Index for filtering
  @@unique([name, companyId]) // Add unique constraint for upsert in tests
  @@map("services") // Map to lowercase table name
}

// Modelo de Profissional
model Professional {
  id            String    @id @default(uuid())
  name          String
  role          String
  image         String?
  rating        Float     @default(0)
  totalReviews  Int       @default(0) @map("total_reviews")
  company       Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String    @map("company_id")
  services      ProfessionalService[]
  experiences   ProfessionalExperience[] // Added relation
  education     ProfessionalEducation[]  // Added relation
  scheduledAppointments Appointment[] @relation("ProfessionalAppointments")
  reviews       Review[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@index([name])      // Index for sorting and searching
  @@index([rating])    // Index for sorting and filtering
  @@index([companyId]) // Index for filtering
  @@index([role])      // Index for filtering and searching
  @@map("professionals") // Map to lowercase table name
}

// Modelo de Experiência Profissional (NOVO)
model ProfessionalExperience {
  id            String    @id @default(uuid())
  title         String    // Cargo
  companyName   String    @map("company_name") // Nome da empresa onde trabalhou
  description   String?   // Descrição das responsabilidades
  startDate     DateTime  @map("start_date") // Data de início
  endDate       DateTime? @map("end_date")   // Data de término (opcional se atual)
  isCurrent     Boolean   @default(false) @map("is_current") // Se é o emprego atual
  professional  Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId String    @map("professional_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@index([professionalId]) // Index for querying experiences
  @@map("professional_experiences")
}

// Modelo de Formação Acadêmica (NOVO)
model ProfessionalEducation {
  id            String    @id @default(uuid())
  institution   String    // Nome da instituição
  degree        String    // Grau obtido (ex: Bacharelado, Técnico)
  fieldOfStudy  String    @map("field_of_study") // Área de estudo
  startDate     DateTime  @map("start_date") // Data de início
  endDate       DateTime? @map("end_date")   // Data de término (opcional)
  description   String?   // Descrição adicional
  professional  Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId String    @map("professional_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@index([professionalId]) // Index for querying education
  @@map("professional_education")
}

// Tabela de relacionamento entre Profissional e Serviço
model ProfessionalService {
  professional  Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId String       @map("professional_id")
  service       Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId     String       @map("service_id")
  price         String?      // Keeping this as String? for now, might need specific pricing per professional

  @@id([professionalId, serviceId])
  @@index([serviceId]) // Index for filtering professionals by service
  @@map("professional_services") // Map to lowercase table name
}

// Modelo de Agendamento
model Appointment {
  id            String    @id @default(uuid())
  date          DateTime
  status        AppointmentStatus @default(PENDING)
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @map("user_id")
  service       Service   @relation(fields: [serviceId], references: [id])
  serviceId     String    @map("service_id")
  professional  Professional? @relation("ProfessionalAppointments", fields: [professionalId], references: [id], onDelete: SetNull)
  professionalId String?   @map("professional_id")
  notes         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@index([userId])         // Index for user appointments
  @@index([serviceId])      // Index for service appointments
  @@index([professionalId]) // Index for professional appointments
  @@index([date])           // Index for filtering by date
  @@map("appointments") // Map to lowercase table name
}

// Modelo de Avaliação
model Review {
  id            String    @id @default(uuid())
  rating        Float
  comment       String?
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @map("user_id")
  service       Service?  @relation(fields: [serviceId], references: [id])
  serviceId     String?   @map("service_id")
  professional  Professional? @relation(fields: [professionalId], references: [id])
  professionalId String?   @map("professional_id")
  company       Company?  @relation(fields: [companyId], references: [id])
  companyId     String?   @map("company_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@index([userId])         // Index for user reviews
  @@index([serviceId])      // Index for service reviews
  @@index([professionalId]) // Index for professional reviews
  @@index([companyId])      // Index for company reviews
  @@index([rating])         // Index for filtering by rating
  @@map("reviews") // Map to lowercase table name
}

// Modelo de Categoria (NOVO)
model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique // Unique index already exists
  icon      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  services  Service[] // Added opposite relation field

  @@map("categories") // Map to lowercase table name
}

// Enumeração para status de agendamento
enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED

  @@map("appointment_status") // Map enum to lowercase name
}

// Enumeração para papel do usuário (NOVO)
enum UserRole {
  USER
  ADMIN
  // Add other roles like PROFESSIONAL, COMPANY_ADMIN if needed

  @@map("user_role") // Map enum to lowercase name
}

